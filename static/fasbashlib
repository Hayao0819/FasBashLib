#!/usr/bin/env bash

set -Eeuo pipefail

#LibraryPATH="%LIBRARYPATH%"
LibraryPATH="/usr/lib/fasbashlib"

# shellcheck disable=SC2010
readarray -t LibraryVersionList < <(ls "$LibraryPATH" 2> /dev/null | grep -v "filelist")

ScriptSourceMode=false
LibList=()
InstalledLibList=()
VersionAndType=""
VersionToLoad=""
TypeToLoad=""

_HelpDoc(){
    echo "Return loadable shell script that you want to use"
    echo
    echo " Usage: ${0} load version-type Lib1 Lib2 ..."
    echo " Usage: ${0} list [version] [Lib]"
    echo
    echo " Options for all:"
    echo "     -h    Show this message"
    echo
    echo " Options for load:"
    echo "     -x    Script source mode"
    echo
    echo " Options for list:"
    echo "     There is no options"
    echo
    echo " Version:"
    echo -n "     "
    printf "%s," "${LibraryVersionList[@]}" | sed 's/,$//'; echo
    echo " Type:"
    echo "     upper, lower, snake"
}

Msg.Error(){
    echo "ERROR: $*" >&2
}

_LoadCommand_CheckArgs(){
    VersionAndType="$1"
    shift 1
    LibList=("$@")

    [[ -n "$VersionAndType" ]] || {
        Msg.Error "Version and type is not specified."
        _HelpDoc
        exit 1
    }

    [[ -n "${LibList[*]}" ]] || {
        Msg.Error "Library is not specified."
        _HelpDoc
        exit 1
    }

    VersionToLoad="$(cut -d "-" -f 1 <<< "$VersionAndType")"
    TypeToLoad="$(cut -d "-" -f 2 <<< "$VersionAndType")"

    [[ -d "$LibraryPATH/$VersionToLoad" ]] || {
        Msg.Error "Version $VersionToLoad is not found."
        _HelpDoc
        exit 1
    }

    [[ -d "$LibraryPATH/$VersionToLoad/$TypeToLoad" ]] || {
        Msg.Error "Type $TypeToLoad is not found."
        _HelpDoc
        exit 1
    }
}

_LoadCommand_GetInstalledLibList(){
    [[ -e "$LibraryPATH/$VersionToLoad/info.json" ]] || {
        Msg.Error "Library information is not found."
        _HelpDoc
        exit 1
    }

    readarray -t InstalledLibList < <(jq -r ". | keys | .[]" "$LibraryPATH/$VersionToLoad/info.json")
}

_LoadCommand_GetRequireList(){
    local Lib
    for Lib in "${LibList[@]}"; do
        if ! [[ "${InstalledLibList[*]}" =~ $Lib ]]; then
            Msg.Error "Library $Lib is not found."
            _HelpDoc
            exit 1
        fi
        readarray -O "${#LibList[@]}" -t LibList < <(jq -r ".$Lib.require[]?" "$LibraryPATH/$VersionToLoad/info.json")
    done
    readarray -t LibList < <(printf "%s\n" "${LibList[@]}" | sort -u | uniq)
}

_LoadCommand_PrintCode(){
    local Lib
    if [[ "$ScriptSourceMode" = true ]]; then
        for Lib in "${LibList[@]}"; do
            cat "$LibraryPATH/$VersionToLoad/$TypeToLoad/${Lib}.sh"
        done | sed 's/^#.*$//'
    else
        for Lib in "${LibList[@]}"; do
            echo "$LibraryPATH/$VersionToLoad/$TypeToLoad/${Lib}.sh"
        done
    fi
}


_LoadCommand(){
    _LoadCommand_CheckArgs "$@"
    _LoadCommand_GetInstalledLibList
    _LoadCommand_GetRequireList #"$VersionAndType" "$@"
    _LoadCommand_PrintCode
}

_ListCommand_VersionList(){
    printf "%s¥\n" "${LibraryVersionList[@]}"
    return 0
}

# $1=Version $2=Lib
_ListCommand(){
    # 引数なしの場合はバージョン一覧を表示
    if [[ -z "$1" ]]; then
        _ListCommand_VersionList
        exit 0
    fi

    if ! [[ "${LibraryVersionList[*]}" =~ $1 ]]; then
        Msg.Error "Version $1 is not found."
        exit 1
    fi

    # バージョンのみ指定で存在する場合関数一覧を表示
    if [[ -z "${2-""}" ]]; then
        jq -r ". | keys | .[]" "$LibraryPATH/$1/info.json"
        exit 0
    elif ! [[ "${InstalledLibList[*]}" =~ $2 ]]; then
        Msg.Error "Library $2 is not found."
        exit 1
    fi

    # バージョンと関数名が指定されている場合は関数の一覧を表示
    jq -r ".$2.functions[]" "$LibraryPATH/$1/info.json"
    exit 0
}

#-- Main --#
while getopts "hx" opt; do
    case "$opt" in
        x)
            ScriptSourceMode=true
            ;;
        h)
            _HelpDoc
            exit 0
            ;;
        *)
            _HelpDoc
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

# start
case "${1,,}" in
    "load" )
        _LoadCommand "$@"
        ;;
    "list" )
        _ListCommand "$@"
        ;;
esac
